/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Positions as PrismaPositions } from "@prisma/client";

export class PositionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PositionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.positions.count(args);
  }

  async positionsItems(
    args: Prisma.PositionsFindManyArgs
  ): Promise<PrismaPositions[]> {
    return this.prisma.positions.findMany(args);
  }
  async positions(
    args: Prisma.PositionsFindUniqueArgs
  ): Promise<PrismaPositions | null> {
    return this.prisma.positions.findUnique(args);
  }
  async createPositions(
    args: Prisma.PositionsCreateArgs
  ): Promise<PrismaPositions> {
    return this.prisma.positions.create(args);
  }
  async updatePositions(
    args: Prisma.PositionsUpdateArgs
  ): Promise<PrismaPositions> {
    return this.prisma.positions.update(args);
  }
  async deletePositions(
    args: Prisma.PositionsDeleteArgs
  ): Promise<PrismaPositions> {
    return this.prisma.positions.delete(args);
  }
}
