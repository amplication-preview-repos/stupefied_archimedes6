/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Positions } from "./Positions";
import { PositionsCountArgs } from "./PositionsCountArgs";
import { PositionsFindManyArgs } from "./PositionsFindManyArgs";
import { PositionsFindUniqueArgs } from "./PositionsFindUniqueArgs";
import { CreatePositionsArgs } from "./CreatePositionsArgs";
import { UpdatePositionsArgs } from "./UpdatePositionsArgs";
import { DeletePositionsArgs } from "./DeletePositionsArgs";
import { PositionsService } from "../positions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Positions)
export class PositionsResolverBase {
  constructor(
    protected readonly service: PositionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Positions",
    action: "read",
    possession: "any",
  })
  async _positionsItemsMeta(
    @graphql.Args() args: PositionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Positions])
  @nestAccessControl.UseRoles({
    resource: "Positions",
    action: "read",
    possession: "any",
  })
  async positionsItems(
    @graphql.Args() args: PositionsFindManyArgs
  ): Promise<Positions[]> {
    return this.service.positionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Positions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Positions",
    action: "read",
    possession: "own",
  })
  async positions(
    @graphql.Args() args: PositionsFindUniqueArgs
  ): Promise<Positions | null> {
    const result = await this.service.positions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Positions)
  @nestAccessControl.UseRoles({
    resource: "Positions",
    action: "create",
    possession: "any",
  })
  async createPositions(
    @graphql.Args() args: CreatePositionsArgs
  ): Promise<Positions> {
    return await this.service.createPositions({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Positions)
  @nestAccessControl.UseRoles({
    resource: "Positions",
    action: "update",
    possession: "any",
  })
  async updatePositions(
    @graphql.Args() args: UpdatePositionsArgs
  ): Promise<Positions | null> {
    try {
      return await this.service.updatePositions({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Positions)
  @nestAccessControl.UseRoles({
    resource: "Positions",
    action: "delete",
    possession: "any",
  })
  async deletePositions(
    @graphql.Args() args: DeletePositionsArgs
  ): Promise<Positions | null> {
    try {
      return await this.service.deletePositions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
