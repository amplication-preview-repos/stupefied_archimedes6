/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentDetails } from "./PaymentDetails";
import { PaymentDetailsCountArgs } from "./PaymentDetailsCountArgs";
import { PaymentDetailsFindManyArgs } from "./PaymentDetailsFindManyArgs";
import { PaymentDetailsFindUniqueArgs } from "./PaymentDetailsFindUniqueArgs";
import { CreatePaymentDetailsArgs } from "./CreatePaymentDetailsArgs";
import { UpdatePaymentDetailsArgs } from "./UpdatePaymentDetailsArgs";
import { DeletePaymentDetailsArgs } from "./DeletePaymentDetailsArgs";
import { Payments } from "../../payments/base/Payments";
import { PaymentDetailsService } from "../paymentDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentDetails)
export class PaymentDetailsResolverBase {
  constructor(
    protected readonly service: PaymentDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentDetails",
    action: "read",
    possession: "any",
  })
  async _paymentDetailsItemsMeta(
    @graphql.Args() args: PaymentDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentDetails])
  @nestAccessControl.UseRoles({
    resource: "PaymentDetails",
    action: "read",
    possession: "any",
  })
  async paymentDetailsItems(
    @graphql.Args() args: PaymentDetailsFindManyArgs
  ): Promise<PaymentDetails[]> {
    return this.service.paymentDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentDetails",
    action: "read",
    possession: "own",
  })
  async paymentDetails(
    @graphql.Args() args: PaymentDetailsFindUniqueArgs
  ): Promise<PaymentDetails | null> {
    const result = await this.service.paymentDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentDetails)
  @nestAccessControl.UseRoles({
    resource: "PaymentDetails",
    action: "create",
    possession: "any",
  })
  async createPaymentDetails(
    @graphql.Args() args: CreatePaymentDetailsArgs
  ): Promise<PaymentDetails> {
    return await this.service.createPaymentDetails({
      ...args,
      data: {
        ...args.data,

        payment: args.data.payment
          ? {
              connect: args.data.payment,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentDetails)
  @nestAccessControl.UseRoles({
    resource: "PaymentDetails",
    action: "update",
    possession: "any",
  })
  async updatePaymentDetails(
    @graphql.Args() args: UpdatePaymentDetailsArgs
  ): Promise<PaymentDetails | null> {
    try {
      return await this.service.updatePaymentDetails({
        ...args,
        data: {
          ...args.data,

          payment: args.data.payment
            ? {
                connect: args.data.payment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentDetails)
  @nestAccessControl.UseRoles({
    resource: "PaymentDetails",
    action: "delete",
    possession: "any",
  })
  async deletePaymentDetails(
    @graphql.Args() args: DeletePaymentDetailsArgs
  ): Promise<PaymentDetails | null> {
    try {
      return await this.service.deletePaymentDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Payments, {
    nullable: true,
    name: "payment",
  })
  @nestAccessControl.UseRoles({
    resource: "Payments",
    action: "read",
    possession: "any",
  })
  async getPayment(
    @graphql.Parent() parent: PaymentDetails
  ): Promise<Payments | null> {
    const result = await this.service.getPayment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
