/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserProjects as PrismaUserProjects,
  User as PrismaUser,
} from "@prisma/client";

export class UserProjectsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserProjectsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userProjects.count(args);
  }

  async userProjectsItems(
    args: Prisma.UserProjectsFindManyArgs
  ): Promise<PrismaUserProjects[]> {
    return this.prisma.userProjects.findMany(args);
  }
  async userProjects(
    args: Prisma.UserProjectsFindUniqueArgs
  ): Promise<PrismaUserProjects | null> {
    return this.prisma.userProjects.findUnique(args);
  }
  async createUserProjects(
    args: Prisma.UserProjectsCreateArgs
  ): Promise<PrismaUserProjects> {
    return this.prisma.userProjects.create(args);
  }
  async updateUserProjects(
    args: Prisma.UserProjectsUpdateArgs
  ): Promise<PrismaUserProjects> {
    return this.prisma.userProjects.update(args);
  }
  async deleteUserProjects(
    args: Prisma.UserProjectsDeleteArgs
  ): Promise<PrismaUserProjects> {
    return this.prisma.userProjects.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userProjects
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
