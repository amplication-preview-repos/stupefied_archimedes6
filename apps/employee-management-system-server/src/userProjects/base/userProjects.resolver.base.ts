/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserProjects } from "./UserProjects";
import { UserProjectsCountArgs } from "./UserProjectsCountArgs";
import { UserProjectsFindManyArgs } from "./UserProjectsFindManyArgs";
import { UserProjectsFindUniqueArgs } from "./UserProjectsFindUniqueArgs";
import { CreateUserProjectsArgs } from "./CreateUserProjectsArgs";
import { UpdateUserProjectsArgs } from "./UpdateUserProjectsArgs";
import { DeleteUserProjectsArgs } from "./DeleteUserProjectsArgs";
import { User } from "../../user/base/User";
import { UserProjectsService } from "../userProjects.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserProjects)
export class UserProjectsResolverBase {
  constructor(
    protected readonly service: UserProjectsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "read",
    possession: "any",
  })
  async _userProjectsItemsMeta(
    @graphql.Args() args: UserProjectsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserProjects])
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "read",
    possession: "any",
  })
  async userProjectsItems(
    @graphql.Args() args: UserProjectsFindManyArgs
  ): Promise<UserProjects[]> {
    return this.service.userProjectsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserProjects, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "read",
    possession: "own",
  })
  async userProjects(
    @graphql.Args() args: UserProjectsFindUniqueArgs
  ): Promise<UserProjects | null> {
    const result = await this.service.userProjects(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserProjects)
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "create",
    possession: "any",
  })
  async createUserProjects(
    @graphql.Args() args: CreateUserProjectsArgs
  ): Promise<UserProjects> {
    return await this.service.createUserProjects({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserProjects)
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "update",
    possession: "any",
  })
  async updateUserProjects(
    @graphql.Args() args: UpdateUserProjectsArgs
  ): Promise<UserProjects | null> {
    try {
      return await this.service.updateUserProjects({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserProjects)
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "delete",
    possession: "any",
  })
  async deleteUserProjects(
    @graphql.Args() args: DeleteUserProjectsArgs
  ): Promise<UserProjects | null> {
    try {
      return await this.service.deleteUserProjects(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserProjects): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
