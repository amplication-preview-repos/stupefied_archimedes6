/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Holidays } from "./Holidays";
import { HolidaysCountArgs } from "./HolidaysCountArgs";
import { HolidaysFindManyArgs } from "./HolidaysFindManyArgs";
import { HolidaysFindUniqueArgs } from "./HolidaysFindUniqueArgs";
import { CreateHolidaysArgs } from "./CreateHolidaysArgs";
import { UpdateHolidaysArgs } from "./UpdateHolidaysArgs";
import { DeleteHolidaysArgs } from "./DeleteHolidaysArgs";
import { HolidaysService } from "../holidays.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Holidays)
export class HolidaysResolverBase {
  constructor(
    protected readonly service: HolidaysService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Holidays",
    action: "read",
    possession: "any",
  })
  async _holidaysItemsMeta(
    @graphql.Args() args: HolidaysCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Holidays])
  @nestAccessControl.UseRoles({
    resource: "Holidays",
    action: "read",
    possession: "any",
  })
  async holidaysItems(
    @graphql.Args() args: HolidaysFindManyArgs
  ): Promise<Holidays[]> {
    return this.service.holidaysItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Holidays, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Holidays",
    action: "read",
    possession: "own",
  })
  async holidays(
    @graphql.Args() args: HolidaysFindUniqueArgs
  ): Promise<Holidays | null> {
    const result = await this.service.holidays(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Holidays)
  @nestAccessControl.UseRoles({
    resource: "Holidays",
    action: "create",
    possession: "any",
  })
  async createHolidays(
    @graphql.Args() args: CreateHolidaysArgs
  ): Promise<Holidays> {
    return await this.service.createHolidays({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Holidays)
  @nestAccessControl.UseRoles({
    resource: "Holidays",
    action: "update",
    possession: "any",
  })
  async updateHolidays(
    @graphql.Args() args: UpdateHolidaysArgs
  ): Promise<Holidays | null> {
    try {
      return await this.service.updateHolidays({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Holidays)
  @nestAccessControl.UseRoles({
    resource: "Holidays",
    action: "delete",
    possession: "any",
  })
  async deleteHolidays(
    @graphql.Args() args: DeleteHolidaysArgs
  ): Promise<Holidays | null> {
    try {
      return await this.service.deleteHolidays(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
