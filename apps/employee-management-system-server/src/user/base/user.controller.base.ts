/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { UserPositionsFindManyArgs } from "../../userPositions/base/UserPositionsFindManyArgs";
import { UserPositions } from "../../userPositions/base/UserPositions";
import { UserPositionsWhereUniqueInput } from "../../userPositions/base/UserPositionsWhereUniqueInput";
import { UserProjectsFindManyArgs } from "../../userProjects/base/UserProjectsFindManyArgs";
import { UserProjects } from "../../userProjects/base/UserProjects";
import { UserProjectsWhereUniqueInput } from "../../userProjects/base/UserProjectsWhereUniqueInput";
import { VacationsFindManyArgs } from "../../vacations/base/VacationsFindManyArgs";
import { Vacations } from "../../vacations/base/Vacations";
import { VacationsWhereUniqueInput } from "../../vacations/base/VacationsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        employmentEndDate: true,
        employmentStartDate: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        status: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        employmentEndDate: true,
        employmentStartDate: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        status: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        employmentEndDate: true,
        employmentStartDate: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        status: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          employmentEndDate: true,
          employmentStartDate: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          status: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          employmentEndDate: true,
          employmentStartDate: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          status: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userPositionsItems")
  @ApiNestedQuery(UserPositionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "read",
    possession: "any",
  })
  async findUserPositionsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserPositions[]> {
    const query = plainToClass(UserPositionsFindManyArgs, request.query);
    const results = await this.service.findUserPositionsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userPositionsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserPositionsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserPositionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPositionsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userPositionsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserPositionsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserPositionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPositionsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userPositionsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserPositionsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserPositionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPositionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userProjectsItems")
  @ApiNestedQuery(UserProjectsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserProjects",
    action: "read",
    possession: "any",
  })
  async findUserProjectsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserProjects[]> {
    const query = plainToClass(UserProjectsFindManyArgs, request.query);
    const results = await this.service.findUserProjectsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userProjectsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserProjectsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProjectsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userProjectsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserProjectsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProjectsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userProjectsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserProjectsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserProjectsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userProjectsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/vacationsItems")
  @ApiNestedQuery(VacationsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "read",
    possession: "any",
  })
  async findVacationsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Vacations[]> {
    const query = plainToClass(VacationsFindManyArgs, request.query);
    const results = await this.service.findVacationsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        workingDays: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vacationsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectVacationsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VacationsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vacationsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vacationsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateVacationsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VacationsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vacationsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vacationsItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectVacationsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VacationsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vacationsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
