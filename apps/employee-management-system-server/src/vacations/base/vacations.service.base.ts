/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Vacations as PrismaVacations,
  User as PrismaUser,
} from "@prisma/client";

export class VacationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VacationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vacations.count(args);
  }

  async vacationsItems(
    args: Prisma.VacationsFindManyArgs
  ): Promise<PrismaVacations[]> {
    return this.prisma.vacations.findMany(args);
  }
  async vacations(
    args: Prisma.VacationsFindUniqueArgs
  ): Promise<PrismaVacations | null> {
    return this.prisma.vacations.findUnique(args);
  }
  async createVacations(
    args: Prisma.VacationsCreateArgs
  ): Promise<PrismaVacations> {
    return this.prisma.vacations.create(args);
  }
  async updateVacations(
    args: Prisma.VacationsUpdateArgs
  ): Promise<PrismaVacations> {
    return this.prisma.vacations.update(args);
  }
  async deleteVacations(
    args: Prisma.VacationsDeleteArgs
  ): Promise<PrismaVacations> {
    return this.prisma.vacations.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.vacations
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
