/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Vacations } from "./Vacations";
import { VacationsCountArgs } from "./VacationsCountArgs";
import { VacationsFindManyArgs } from "./VacationsFindManyArgs";
import { VacationsFindUniqueArgs } from "./VacationsFindUniqueArgs";
import { CreateVacationsArgs } from "./CreateVacationsArgs";
import { UpdateVacationsArgs } from "./UpdateVacationsArgs";
import { DeleteVacationsArgs } from "./DeleteVacationsArgs";
import { User } from "../../user/base/User";
import { VacationsService } from "../vacations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vacations)
export class VacationsResolverBase {
  constructor(
    protected readonly service: VacationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "read",
    possession: "any",
  })
  async _vacationsItemsMeta(
    @graphql.Args() args: VacationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vacations])
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "read",
    possession: "any",
  })
  async vacationsItems(
    @graphql.Args() args: VacationsFindManyArgs
  ): Promise<Vacations[]> {
    return this.service.vacationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vacations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "read",
    possession: "own",
  })
  async vacations(
    @graphql.Args() args: VacationsFindUniqueArgs
  ): Promise<Vacations | null> {
    const result = await this.service.vacations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vacations)
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "create",
    possession: "any",
  })
  async createVacations(
    @graphql.Args() args: CreateVacationsArgs
  ): Promise<Vacations> {
    return await this.service.createVacations({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vacations)
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "update",
    possession: "any",
  })
  async updateVacations(
    @graphql.Args() args: UpdateVacationsArgs
  ): Promise<Vacations | null> {
    try {
      return await this.service.updateVacations({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vacations)
  @nestAccessControl.UseRoles({
    resource: "Vacations",
    action: "delete",
    possession: "any",
  })
  async deleteVacations(
    @graphql.Args() args: DeleteVacationsArgs
  ): Promise<Vacations | null> {
    try {
      return await this.service.deleteVacations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Vacations): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
