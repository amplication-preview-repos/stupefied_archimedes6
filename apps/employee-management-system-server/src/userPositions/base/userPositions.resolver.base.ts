/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserPositions } from "./UserPositions";
import { UserPositionsCountArgs } from "./UserPositionsCountArgs";
import { UserPositionsFindManyArgs } from "./UserPositionsFindManyArgs";
import { UserPositionsFindUniqueArgs } from "./UserPositionsFindUniqueArgs";
import { CreateUserPositionsArgs } from "./CreateUserPositionsArgs";
import { UpdateUserPositionsArgs } from "./UpdateUserPositionsArgs";
import { DeleteUserPositionsArgs } from "./DeleteUserPositionsArgs";
import { User } from "../../user/base/User";
import { UserPositionsService } from "../userPositions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserPositions)
export class UserPositionsResolverBase {
  constructor(
    protected readonly service: UserPositionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "read",
    possession: "any",
  })
  async _userPositionsItemsMeta(
    @graphql.Args() args: UserPositionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserPositions])
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "read",
    possession: "any",
  })
  async userPositionsItems(
    @graphql.Args() args: UserPositionsFindManyArgs
  ): Promise<UserPositions[]> {
    return this.service.userPositionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserPositions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "read",
    possession: "own",
  })
  async userPositions(
    @graphql.Args() args: UserPositionsFindUniqueArgs
  ): Promise<UserPositions | null> {
    const result = await this.service.userPositions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPositions)
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "create",
    possession: "any",
  })
  async createUserPositions(
    @graphql.Args() args: CreateUserPositionsArgs
  ): Promise<UserPositions> {
    return await this.service.createUserPositions({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPositions)
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "update",
    possession: "any",
  })
  async updateUserPositions(
    @graphql.Args() args: UpdateUserPositionsArgs
  ): Promise<UserPositions | null> {
    try {
      return await this.service.updateUserPositions({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPositions)
  @nestAccessControl.UseRoles({
    resource: "UserPositions",
    action: "delete",
    possession: "any",
  })
  async deleteUserPositions(
    @graphql.Args() args: DeleteUserPositionsArgs
  ): Promise<UserPositions | null> {
    try {
      return await this.service.deleteUserPositions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserPositions): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
